<?php  //[STAMP] 708b150128b833be0253ef972aa5d21d
namespace _generated;

// This class was automatically generated by build task
// You should not change it manually as it will be overwritten on next build
// @codingStandardsIgnoreFile

trait DriverActions
{
    /**
     * @return \Codeception\Scenario
     */
    abstract protected function getScenario();

    
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Print out latest Selenium Logs in debug mode
     * @see \Appium\AppiumDriver::debugAppiumDriverLogs()
     */
    public function debugAppiumDriverLogs() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('debugAppiumDriverLogs', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @return string|null
     * @see \Appium\AppiumDriver::getDeviceName()
     */
    public function getDeviceName() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getDeviceName', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @return \Appium\Remote\AppiumRemoteDriver
     * @see \Appium\AppiumDriver::getDriver()
     */
    public function getDriver() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getDriver', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @return \PHPUnit_Extensions_Selenium2TestCase_URL
     * @see \Appium\AppiumDriver::getSessionUrl()
     */
    public function getSessionUrl() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getSessionUrl', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @return \Appium\TestCase\Session
     * @see \Appium\AppiumDriver::getSession()
     */
    public function getSession() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getSession', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * print to cli
     *
     * @param $msg
     * @see \Appium\AppiumDriver::outputCli()
     */
    public function outputCli($msg) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('outputCli', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @return \Appium\TestCase\Element
     * @see \Appium\AppiumDriver::TestCaseElement()
     */
    public function TestCaseElement() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('TestCaseElement', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param $method
     * @param $command
     * @param $data
     *
     * @return mixed
     * @see \Appium\AppiumDriver::driverCommand()
     */
    public function driverCommand($method, $command, $data = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('driverCommand', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param $method
     * @param $command
     * @param $data
     *
     * @return mixed
     * @see \Appium\AppiumDriver::driverCommandWithoutSession()
     */
    public function driverCommandWithoutSession($method, $command, $data = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('driverCommandWithoutSession', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * getStatus
     *
     * Query the server's current status.
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::getStatus()
     */
    public function getStatus() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getStatus', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * createSession
     *
     * Create a new session.
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     * @param array $data
     * @options {"optional":["desiredCapabilities","requiredCapabilities","capabilities"]}
     *
     * @return mixed
     *
     *
     * @see \Appium\AppiumDriver::createSession()
     */
    public function createSession($data) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('createSession', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * getSessions
     *
     * Returns a list of the currently active sessions.
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::getSessions()
     */
    public function getSessions() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getSessions', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * timeouts
     *
     * Configure the amount of time that a particular type of operation can execute for before they are aborted and a
     * |Timeout| error is returned to the client.
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     * @param array $data
     * @options {"optional":["type","ms","script","pageLoad","implicit"]}
     *
     * @return mixed
     *
     *
     * @see \Appium\AppiumDriver::timeouts()
     */
    public function timeouts($data) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('timeouts', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * asyncScriptTimeout
     *
     * Set the amount of time, in milliseconds, that asynchronous scripts executed by /session/:sessionId/execute_async
     * are permitted to run before they are aborted and a |Timeout| error is returned to the client.
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     * @param array $data
     * @options {"required":["ms"]}
     *
     * @return mixed
     *
     *
     * @see \Appium\AppiumDriver::asyncScriptTimeout()
     */
    public function asyncScriptTimeout($data) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('asyncScriptTimeout', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * implicitWait
     *
     * Set the amount of time the driver should wait when searching for elements.
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     * @param array $data
     * @options {"required":["ms"]}
     *
     * @return mixed
     *
     *
     * @see \Appium\AppiumDriver::implicitWait()
     */
    public function implicitWait($data) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('implicitWait', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * getWindowHandle
     *
     * NOTE: Discard the duplicate function (getWindowHandle) with 'window_handle'.
     *
     * Retrieve the current window handle.
     * get /wd/hub/session/:sessionid/window
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::getWindowHandle()
     */
    public function getWindowHandle() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getWindowHandle', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * getWindowHandles
     *
     * NOTE: Discard the duplicate function (getWindowHandles) with 'window_handles'.
     *
     * Retrieve the list of all window handles available to the session.
     *
     * get /wd/hub/session/:sessionid/window/handles
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::getWindowHandles()
     */
    public function getWindowHandles() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getWindowHandles', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * getUrl
     *
     * Retrieve the URL of the current page.
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::getUrl()
     */
    public function getUrl() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getUrl', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * setUrl
     *
     * Navigate to a new URL.
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     * @param array $data
     * @options {"required":["url"]}
     *
     * @return mixed
     *
     *
     * @see \Appium\AppiumDriver::setUrl()
     */
    public function setUrl($data) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('setUrl', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * forward
     *
     * Navigate forwards in the browser history, if possible.
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::forward()
     */
    public function forward() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('forward', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * back
     *
     * Navigate backwards in the browser history, if possible.
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::back()
     */
    public function back() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('back', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * refresh
     *
     * Refresh the current page.
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::refresh()
     */
    public function refresh() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('refresh', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * execute
     *
     * Inject a snippet of JavaScript into the page for execution in the context of the currently selected frame.
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     * @param array $data
     * @options {"required":["script","args"]}
     *
     * @return mixed
     *
     *
     * @see \Appium\AppiumDriver::execute()
     */
    public function execute($data) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('execute', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * executeAsync
     *
     * Inject a snippet of JavaScript into the page for asynchronous execution in the context of the currently selected
     * frame.
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     * @param array $data
     * @options {"required":["script","args"]}
     *
     * @return mixed
     *
     *
     * @see \Appium\AppiumDriver::executeAsync()
     */
    public function executeAsync($data) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('executeAsync', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * getScreenshot
     *
     * Take a screenshot of the current page.
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::getScreenshot()
     */
    public function getScreenshot() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getScreenshot', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * availableIMEEngines
     *
     * List all available engines on the machine.
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::availableIMEEngines()
     */
    public function availableIMEEngines() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('availableIMEEngines', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * getActiveIMEEngine
     *
     * Get the name of the active IME engine.
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::getActiveIMEEngine()
     */
    public function getActiveIMEEngine() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getActiveIMEEngine', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * isIMEActivated
     *
     * Indicates whether IME input is active at the moment (not if it's available).
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::isIMEActivated()
     */
    public function isIMEActivated() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('isIMEActivated', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * deactivateIMEEngine
     *
     * De-activates the currently-active IME engine.
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::deactivateIMEEngine()
     */
    public function deactivateIMEEngine() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('deactivateIMEEngine', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * activateIMEEngine
     *
     * Make an engines that is available (appears on the listreturned by getAvailableEngines) active.
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     * @param array $data
     * @options {"required":["engine"]}
     *
     * @return mixed
     *
     *
     * @see \Appium\AppiumDriver::activateIMEEngine()
     */
    public function activateIMEEngine($data) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('activateIMEEngine', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * setFrame
     *
     * Change focus to another frame on the page.
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     * @param array $data
     * @options {"required":["id"]}
     *
     * @return mixed
     *
     *
     * @see \Appium\AppiumDriver::setFrame()
     */
    public function setFrame($data) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('setFrame', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * setWindow
     *
     * Change focus to another window.
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     * @param array $data
     * @options {"required":["name"]}
     *
     * @return mixed
     *
     *
     * @see \Appium\AppiumDriver::setWindow()
     */
    public function setWindow($data) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('setWindow', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * closeWindow
     *
     * Close the current window.
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::closeWindow()
     */
    public function closeWindow() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('closeWindow', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * postWindowSize
     *
     * Change the size of the specified window.
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::postWindowSize()
     */
    public function postWindowSize($windowhandle) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('postWindowSize', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * getWindowSize
     *
     * Get the size of the specified window.
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::getWindowSize()
     */
    public function getWindowSize($windowhandle) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getWindowSize', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * postWindowPosition
     *
     * Change the position of the specified window.
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::postWindowPosition()
     */
    public function postWindowPosition($windowhandle) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('postWindowPosition', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * getWindowPosition
     *
     * Get the position of the specified window.
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::getWindowPosition()
     */
    public function getWindowPosition($windowhandle) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getWindowPosition', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * getCookies
     *
     * Retrieve all cookies visible to the current page.
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::getCookies()
     */
    public function getCookies() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getCookies', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * setCookie
     *
     * Set a cookie.
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     * @param array $data
     * @options {"required":["cookie"]}
     *
     * @return mixed
     *
     *
     * @see \Appium\AppiumDriver::setCookie()
     */
    public function setCookie($data) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('setCookie', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * deleteCookies
     *
     * Delete all cookies visible to the current page.
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::deleteCookies()
     */
    public function deleteCookies() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('deleteCookies', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * deleteCookie
     *
     * Delete the cookie with the given name.
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::deleteCookie()
     */
    public function deleteCookie($name) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('deleteCookie', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * getPageSource
     *
     * Get the current page source.
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::getPageSource()
     */
    public function getPageSource() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getPageSource', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * title
     *
     * Get the current page title.
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::title()
     */
    public function title() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('title', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * findElement
     *
     * Search for an element on the page, starting from the document root.
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     * @param array $data
     * @options {"required":["using","value"]}
     *
     * @return mixed
     *
     *
     * @see \Appium\AppiumDriver::findElement()
     */
    public function findElement($data) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('findElement', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * findElements
     *
     * Search for multiple elements on the page, starting from the document root.
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     * @param array $data
     * @options {"required":["using","value"]}
     *
     * @return mixed
     *
     *
     * @see \Appium\AppiumDriver::findElements()
     */
    public function findElements($data) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('findElements', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * keys
     *
     * Send a sequence of key strokes to the active element.
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     * @param array $data
     * @options {"required":["value"]}
     *
     * @return mixed
     *
     *
     * @see \Appium\AppiumDriver::keys()
     */
    public function keys($data) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('keys', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * getOrientation
     *
     * Get the current browser orientation.
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::getOrientation()
     */
    public function getOrientation() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getOrientation', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * setOrientation
     *
     * Set the browser orientation.
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     * @param array $data
     * @options {"required":["orientation"]}
     *
     * @return mixed
     *
     *
     * @see \Appium\AppiumDriver::setOrientation()
     */
    public function setOrientation($data) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('setOrientation', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * getAlertText
     *
     * Gets the text of the currently displayed JavaScript alert(), confirm(), or prompt() dialog.
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::getAlertText()
     */
    public function getAlertText() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getAlertText', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * setAlertText
     *
     * Sends keystrokes to a JavaScript prompt() dialog.
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     * @param array $data
     * @options {"required":["text"]}
     *
     * @return mixed
     *
     *
     * @see \Appium\AppiumDriver::setAlertText()
     */
    public function setAlertText($data) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('setAlertText', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * postAcceptAlert
     *
     * Accepts the currently displayed alert dialog.
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::postAcceptAlert()
     */
    public function postAcceptAlert() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('postAcceptAlert', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * postDismissAlert
     *
     * Dismisses the currently displayed alert dialog.
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::postDismissAlert()
     */
    public function postDismissAlert() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('postDismissAlert', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * moveTo
     *
     * Move the mouse by an offset of the specificed element.
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     * @param array $data
     * @options {"optional":["element","xoffset","yoffset"]}
     *
     * @return mixed
     *
     *
     * @see \Appium\AppiumDriver::moveTo()
     */
    public function moveTo($data) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('moveTo', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * clickCurrent
     *
     * Click any mouse button (at the coordinates set by the last moveto command).
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     * @param array $data
     * @options {"optional":["button"]}
     *
     * @return mixed
     *
     *
     * @see \Appium\AppiumDriver::clickCurrent()
     */
    public function clickCurrent($data) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('clickCurrent', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * postButtondown
     *
     * Click and hold the left mouse button (at the coordinates set by the last moveto command).
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::postButtondown()
     */
    public function postButtondown() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('postButtondown', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * postButtonup
     *
     * Releases the mouse button previously held (where the mouse is currently at).
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::postButtonup()
     */
    public function postButtonup() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('postButtonup', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * postDoubleclick
     *
     * Double-clicks at the current mouse coordinates (set by moveto).
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::postDoubleclick()
     */
    public function postDoubleclick() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('postDoubleclick', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * touchClick
     *
     * Single tap on the touch enabled device.
     *
     * @note   override mismatch jsonwire file
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     * @param array $data
     * @options {"required":["element"]}
     *
     * @return mixed
     *
     *
     * @see \Appium\AppiumDriver::touchClick()
     */
    public function touchClick($data) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('touchClick', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * touchDown
     *
     * Finger down on the screen.
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     * @param array $data
     * @options {"required":["x","y"]}
     *
     * @return mixed
     *
     *
     * @see \Appium\AppiumDriver::touchDown()
     */
    public function touchDown($data) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('touchDown', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * touchUp
     *
     * Finger up on the screen.
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     * @param array $data
     * @options {"required":["x","y"]}
     *
     * @return mixed
     *
     *
     * @see \Appium\AppiumDriver::touchUp()
     */
    public function touchUp($data) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('touchUp', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * touchMove
     *
     * Finger move on the screen.
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     * @param array $data
     * @options {"required":["x","y"]}
     *
     * @return mixed
     *
     *
     * @see \Appium\AppiumDriver::touchMove()
     */
    public function touchMove($data) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('touchMove', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * postTouchScroll
     *
     * Scroll on the touch screen using finger based motion events.
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::postTouchScroll()
     */
    public function postTouchScroll() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('postTouchScroll', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * postTouchDoubleclick
     *
     * Double tap on the touch screen using finger motion events.
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::postTouchDoubleclick()
     */
    public function postTouchDoubleclick() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('postTouchDoubleclick', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * touchLongClick
     *
     * Long press on the touch screen using finger motion events.
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     * @param array $data
     * @options {"required":["elements"]}
     *
     * @return mixed
     *
     *
     * @see \Appium\AppiumDriver::touchLongClick()
     */
    public function touchLongClick($data) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('touchLongClick', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * flick
     *
     * Flick on the touch screen using finger motion events.
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     * @param array $data
     * @options {"optional":["element","xspeed","yspeed","xoffset","yoffset","speed"]}
     *
     * @return mixed
     *
     *
     * @see \Appium\AppiumDriver::flick()
     */
    public function flick($data) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('flick', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * getGeoLocation
     *
     * Get the current geo location.
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::getGeoLocation()
     */
    public function getGeoLocation() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getGeoLocation', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * setGeoLocation
     *
     * Set the current geo location.
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     * @param array $data
     * @options {"required":["location"]}
     *
     * @return mixed
     *
     *
     * @see \Appium\AppiumDriver::setGeoLocation()
     */
    public function setGeoLocation($data) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('setGeoLocation', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * getLocalStorage
     *
     * Get all keys of the storage.
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::getLocalStorage()
     */
    public function getLocalStorage() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getLocalStorage', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * postLocalStorage
     *
     * Set the storage item for the given key.
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::postLocalStorage()
     */
    public function postLocalStorage() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('postLocalStorage', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * deleteLocalStorage
     *
     * Clear the storage.
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::deleteLocalStorage()
     */
    public function deleteLocalStorage() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('deleteLocalStorage', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * getLocalStorageKey
     *
     * Get the storage item for the given key.
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::getLocalStorageKey()
     */
    public function getLocalStorageKey($key) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getLocalStorageKey', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * deleteLocalStorageKey
     *
     * Remove the storage item for the given key.
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::deleteLocalStorageKey()
     */
    public function deleteLocalStorageKey($key) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('deleteLocalStorageKey', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * getLocalStorageSize
     *
     * Get the number of items in the storage.
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::getLocalStorageSize()
     */
    public function getLocalStorageSize() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getLocalStorageSize', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * getSessionStorage
     *
     * Get all keys of the storage.
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::getSessionStorage()
     */
    public function getSessionStorage() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getSessionStorage', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * postSessionStorage
     *
     * Set the storage item for the given key.
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::postSessionStorage()
     */
    public function postSessionStorage() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('postSessionStorage', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * deleteSessionStorage
     *
     * Clear the storage.
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::deleteSessionStorage()
     */
    public function deleteSessionStorage() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('deleteSessionStorage', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * getSessionStorageKey
     *
     * Get the storage item for the given key.
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::getSessionStorageKey()
     */
    public function getSessionStorageKey($key) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getSessionStorageKey', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * deleteSessionStorageKey
     *
     * Remove the storage item for the given key.
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::deleteSessionStorageKey()
     */
    public function deleteSessionStorageKey($key) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('deleteSessionStorageKey', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * getSessionStorageSize
     *
     * Get the number of items in the storage.
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::getSessionStorageSize()
     */
    public function getSessionStorageSize() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getSessionStorageSize', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * getLog
     *
     * Get the log for a given log type.
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     * @param array $data
     * @options {"required":["type"]}
     *
     * @return mixed
     *
     *
     * @see \Appium\AppiumDriver::getLog()
     */
    public function getLog($data) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getLog', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * getLogTypes
     *
     * Get available log types.
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::getLogTypes()
     */
    public function getLogTypes() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getLogTypes', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * getApplicationCacheStatus
     *
     * Get the status of the html5 application cache.
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::getApplicationCacheStatus()
     */
    public function getApplicationCacheStatus() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getApplicationCacheStatus', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * getCurrentContext
     *
     * Get the current context (mjsonWire).
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::getCurrentContext()
     */
    public function getCurrentContext() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getCurrentContext', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * setContext
     *
     * Set the current context (mjsonWire).
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     * @param array $data
     * @options {"required":["name"]}
     *
     * @return mixed
     *
     *
     * @see \Appium\AppiumDriver::setContext()
     */
    public function setContext($data) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('setContext', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * getContexts
     *
     * Get a list of the available contexts (mjsonWire).
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::getContexts()
     */
    public function getContexts() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getContexts', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * performTouch
     *
     * Perform touch action (mjsonWire).
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     * @param array $data
     * @options {"required":["actions"]}
     *
     * @return mixed
     *
     *
     * @see \Appium\AppiumDriver::performTouch()
     */
    public function performTouch($data) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('performTouch', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * performMultiAction
     *
     * Perform multitouch action (mjsonWire).
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     * @param array $data
     * @options {"required":["actions"],"optional":["elementId"]}
     *
     * @return mixed
     *
     *
     * @see \Appium\AppiumDriver::performMultiAction()
     */
    public function performMultiAction($data) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('performMultiAction', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * mobileShake
     *
     * Shake device (mjsonWire).
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::mobileShake()
     */
    public function mobileShake() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('mobileShake', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * lock
     *
     * Lock device (mjsonWire).
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     * @param array $data
     * @options {"optional":["seconds"]}
     *
     * @return mixed
     *
     *
     * @see \Appium\AppiumDriver::lock()
     */
    public function lock($data) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('lock', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * keyevent
     *
     * Send key event to device (DEPRECATED) (mjsonWire).
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     * @param array $data
     * @options {"required":["keycode"],"optional":["metastate"]}
     *
     * @return mixed
     *
     *
     * @see \Appium\AppiumDriver::keyevent()
     */
    public function keyevent($data) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('keyevent', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * pressKeyCode
     *
     * Send key event to device (mjsonWire).
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     * @param array $data
     * @options {"required":["keycode"],"optional":["metastate"]}
     *
     * @return mixed
     *
     *
     * @see \Appium\AppiumDriver::pressKeyCode()
     */
    public function pressKeyCode($data) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('pressKeyCode', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * mobileRotation
     *
     * Rotate device (mjsonWire).
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     * @param array $data
     * @options {"required":["x","y","radius","rotation","touchCount","duration"],"optional":["element"]}
     *
     * @return mixed
     *
     *
     * @see \Appium\AppiumDriver::mobileRotation()
     */
    public function mobileRotation($data) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('mobileRotation', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * getCurrentActivity
     *
     * Get current activity (mjsonWire).
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::getCurrentActivity()
     */
    public function getCurrentActivity() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getCurrentActivity', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * getCurrentPackage
     *
     * Get current package (mjsonWire).
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::getCurrentPackage()
     */
    public function getCurrentPackage() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getCurrentPackage', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * installApp
     *
     * Install app (mjsonWire).
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     * @param array $data
     * @options {"required":["appPath"],"optional":["options"]}
     *
     * @return mixed
     *
     *
     * @see \Appium\AppiumDriver::installApp()
     */
    public function installApp($data) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('installApp', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * removeApp
     *
     * Remove app (mjsonWire).
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     * @param array $data
     * @options {"required":[["appId"],["bundleId"]],"optional":["options"]}
     *
     * @return mixed
     *
     *
     * @see \Appium\AppiumDriver::removeApp()
     */
    public function removeApp($data) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('removeApp', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * isAppInstalled
     *
     * Check if the app is installed (mjsonWire).
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     * @param array $data
     * @options {"required":[["appId"],["bundleId"]]}
     *
     * @return mixed
     *
     *
     * @see \Appium\AppiumDriver::isAppInstalled()
     */
    public function isAppInstalled($data) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('isAppInstalled', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * pushFile
     *
     * Push file to device (mjsonWire).
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     * @param array $data
     * @options {"required":["path","data"]}
     *
     * @return mixed
     *
     *
     * @see \Appium\AppiumDriver::pushFile()
     */
    public function pushFile($data) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('pushFile', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * pullFile
     *
     * Pull file from device (mjsonWire).
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     * @param array $data
     * @options {"required":["path"]}
     *
     * @return mixed
     *
     *
     * @see \Appium\AppiumDriver::pullFile()
     */
    public function pullFile($data) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('pullFile', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * pullFolder
     *
     * Pull folder from device (mjsonWire).
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     * @param array $data
     * @options {"required":["path"]}
     *
     * @return mixed
     *
     *
     * @see \Appium\AppiumDriver::pullFolder()
     */
    public function pullFolder($data) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('pullFolder', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * toggleFlightMode
     *
     * Toggle airplane mode (mjsonWire).
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::toggleFlightMode()
     */
    public function toggleFlightMode() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('toggleFlightMode', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * toggleWiFi
     *
     * Toggle wifi (mjsonWire).
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::toggleWiFi()
     */
    public function toggleWiFi() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('toggleWiFi', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * toggleLocationServices
     *
     * Toggle location services (mjsonWire).
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::toggleLocationServices()
     */
    public function toggleLocationServices() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('toggleLocationServices', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * toggleData
     *
     * Toggle data (mjsonWire).
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::toggleData()
     */
    public function toggleData() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('toggleData', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * startActivity
     *
     * Start an Android activity (mjsonWire).
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     * @param array $data
     * @options {"required":["appPackage","appActivity"],"optional":["appWaitPackage","appWaitActivity","intentAction","intentCategory","intentFlags","optionalIntentArguments","dontStopAppOnReset"]}
     *
     * @return mixed
     *
     *
     * @see \Appium\AppiumDriver::startActivity()
     */
    public function startActivity($data) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('startActivity', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * launchApp
     *
     * Launch app (mjsonWire).
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::launchApp()
     */
    public function launchApp() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('launchApp', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * closeApp
     *
     * Close app (mjsonWire).
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::closeApp()
     */
    public function closeApp() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('closeApp', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * reset
     *
     * Reset app (mjsonWire).
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::reset()
     */
    public function reset() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('reset', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * background
     *
     * Background app (mjsonWire).
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     * @param array $data
     * @options {"required":["seconds"]}
     *
     * @return mixed
     *
     *
     * @see \Appium\AppiumDriver::background()
     */
    public function background($data) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('background', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * endCoverage
     *
     * End test coverage (mjsonWire).
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     * @param array $data
     * @options {"required":["intent","path"]}
     *
     * @return mixed
     *
     *
     * @see \Appium\AppiumDriver::endCoverage()
     */
    public function endCoverage($data) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('endCoverage', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * getStrings
     *
     * Retrieve app strings (mjsonWire).
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     * @param array $data
     * @options {"optional":["language","stringFile"]}
     *
     * @return mixed
     *
     *
     * @see \Appium\AppiumDriver::getStrings()
     */
    public function getStrings($data) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getStrings', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * getNetworkConnection
     *
     * Get appium selendroid network connection type (mjsonWire).
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::getNetworkConnection()
     */
    public function getNetworkConnection() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getNetworkConnection', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * setNetworkConnection
     *
     * Set appium selendroid network connection type (mjsonWire).
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     * @param array $data
     * @options {"required":["type"]}
     *
     * @return mixed
     *
     *
     * @see \Appium\AppiumDriver::setNetworkConnection()
     */
    public function setNetworkConnection($data) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('setNetworkConnection', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * hideKeyboard
     *
     * Hide keyboard (mjsonWire).
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     * @param array $data
     * @options {"optional":["strategy","key","keyCode","keyName"]}
     *
     * @return mixed
     *
     *
     * @see \Appium\AppiumDriver::hideKeyboard()
     */
    public function hideKeyboard($data) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('hideKeyboard', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * openNotifications
     *
     * Open Notifications (mjsonWire).
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::openNotifications()
     */
    public function openNotifications() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('openNotifications', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * fingerprint
     *
     * Send fingerprint (mjsonWire).
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     * @param array $data
     * @options {"required":["fingerprintId"]}
     *
     * @return mixed
     *
     *
     * @see \Appium\AppiumDriver::fingerprint()
     */
    public function fingerprint($data) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('fingerprint', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * sendSMS
     *
     * Send sms to Android emulator (mjsonWire).
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     * @param array $data
     * @options {"required":["phoneNumber","message"]}
     *
     * @return mixed
     *
     *
     * @see \Appium\AppiumDriver::sendSMS()
     */
    public function sendSMS($data) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('sendSMS', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * gsmCall
     *
     * Send GSM call to Android emulator (mjsonWire).
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     * @param array $data
     * @options {"required":["phoneNumber","action"]}
     *
     * @return mixed
     *
     *
     * @see \Appium\AppiumDriver::gsmCall()
     */
    public function gsmCall($data) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('gsmCall', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * gsmSignal
     *
     * Set GSM signal strenght on Android emulator (mjsonWire).
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     * @param array $data
     * @options {"required":["signalStrengh"]}
     *
     * @return mixed
     *
     *
     * @see \Appium\AppiumDriver::gsmSignal()
     */
    public function gsmSignal($data) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('gsmSignal', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * gsmVoice
     *
     * Set GSM state  fingerprint (mjsonWire).
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     * @param array $data
     * @options {"required":["state"]}
     *
     * @return mixed
     *
     *
     * @see \Appium\AppiumDriver::gsmVoice()
     */
    public function gsmVoice($data) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('gsmVoice', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * powerCapacity
     *
     * Set battery percent on Android emulator (mjsonWire).
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     * @param array $data
     * @options {"required":["percent"]}
     *
     * @return mixed
     *
     *
     * @see \Appium\AppiumDriver::powerCapacity()
     */
    public function powerCapacity($data) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('powerCapacity', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * powerAC
     *
     * Set state of power charger on Android emulator(mjsonWire).
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     * @param array $data
     * @options {"required":["state"]}
     *
     * @return mixed
     *
     *
     * @see \Appium\AppiumDriver::powerAC()
     */
    public function powerAC($data) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('powerAC', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * networkSpeed
     *
     * Set Android emulator network speed (mjsonWire).
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     * @param array $data
     * @options {"required":["netspeed"]}
     *
     * @return mixed
     *
     *
     * @see \Appium\AppiumDriver::networkSpeed()
     */
    public function networkSpeed($data) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('networkSpeed', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * touchId
     *
     * Simulate iOS touchID (mjsonWire)
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     * @param array $data
     * @options {"required":["match"]}
     *
     * @return mixed
     *
     *
     * @see \Appium\AppiumDriver::touchId()
     */
    public function touchId($data) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('touchId', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * getTimeouts
     *
     * get /wd/hub/session/:sessionid/timeouts
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::getTimeouts()
     */
    public function getTimeouts() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getTimeouts', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * postFrameParent
     *
     * post /wd/hub/session/:sessionid/frame/parent
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::postFrameParent()
     */
    public function postFrameParent() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('postFrameParent', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * getCookie
     *
     * get /wd/hub/session/:sessionid/cookie/:name
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::getCookie()
     */
    public function getCookie($name) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getCookie', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * active
     *
     * get /wd/hub/session/:sessionid/element/active
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::active()
     */
    public function active() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('active', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * getElement
     *
     * get /wd/hub/session/:sessionid/element/:elementid
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::getElement()
     */
    public function getElement($elementid) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getElement', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * findElementFromElement
     *
     * post /wd/hub/session/:sessionid/element/:elementid/element
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     * @param array $data
     * @options {"required":["using","value"]}
     *
     * @return mixed
     *
     *
     * @see \Appium\AppiumDriver::findElementFromElement()
     */
    public function findElementFromElement($data, $elementid) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('findElementFromElement', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * findElementsFromElement
     *
     * post /wd/hub/session/:sessionid/element/:elementid/elements
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     * @param array $data
     * @options {"required":["using","value"]}
     *
     * @return mixed
     *
     *
     * @see \Appium\AppiumDriver::findElementsFromElement()
     */
    public function findElementsFromElement($data, $elementid) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('findElementsFromElement', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * click
     *
     * post /wd/hub/session/:sessionid/element/:elementid/click
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::click()
     */
    public function click($elementid) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('click', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * submit
     *
     * post /wd/hub/session/:sessionid/element/:elementid/submit
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::submit()
     */
    public function submit($elementid) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('submit', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * getText
     *
     * get /wd/hub/session/:sessionid/element/:elementid/text
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::getText()
     */
    public function getText($elementid) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getText', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * setValue
     *
     * post /wd/hub/session/:sessionid/element/:elementid/value
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     * @param array $data
     * @options {"optional":["value","text"]}
     *
     * @return mixed
     *
     *
     * @see \Appium\AppiumDriver::setValue()
     */
    public function setValue($data, $elementid) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('setValue', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * getName
     *
     * get /wd/hub/session/:sessionid/element/:elementid/name
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::getName()
     */
    public function getName($elementid) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getName', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * clear
     *
     * post /wd/hub/session/:sessionid/element/:elementid/clear
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::clear()
     */
    public function clear($elementid) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('clear', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * elementSelected
     *
     * get /wd/hub/session/:sessionid/element/:elementid/selected
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::elementSelected()
     */
    public function elementSelected($elementid) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('elementSelected', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * elementEnabled
     *
     * get /wd/hub/session/:sessionid/element/:elementid/enabled
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::elementEnabled()
     */
    public function elementEnabled($elementid) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('elementEnabled', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * getAttribute
     *
     * get /wd/hub/session/:sessionid/element/:elementid/attribute/:name
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::getAttribute()
     */
    public function getAttribute($elementid, $name) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getAttribute', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * equalsElement
     *
     * get /wd/hub/session/:sessionid/element/:elementid/equals/:otherid
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::equalsElement()
     */
    public function equalsElement($elementid, $otherid) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('equalsElement', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * elementDisplayed
     *
     * get /wd/hub/session/:sessionid/element/:elementid/displayed
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::elementDisplayed()
     */
    public function elementDisplayed($elementid) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('elementDisplayed', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * getLocation
     *
     * get /wd/hub/session/:sessionid/element/:elementid/location
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::getLocation()
     */
    public function getLocation($elementid) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getLocation', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * getLocationInView
     *
     * get /wd/hub/session/:sessionid/element/:elementid/location_in_view
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::getLocationInView()
     */
    public function getLocationInView($elementid) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getLocationInView', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * getSize
     *
     * get /wd/hub/session/:sessionid/element/:elementid/size
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::getSize()
     */
    public function getSize($elementid) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getSize', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * getCssProperty
     *
     * get /wd/hub/session/:sessionid/element/:elementid/css/:propertyname
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::getCssProperty()
     */
    public function getCssProperty($elementid, $propertyname) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getCssProperty', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * getRotation
     *
     * get /wd/hub/session/:sessionid/rotation
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::getRotation()
     */
    public function getRotation() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getRotation', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * setRotation
     *
     * post /wd/hub/session/:sessionid/rotation
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     * @param array $data
     * @options {"required":["x","y","z"]}
     *
     * @return mixed
     *
     *
     * @see \Appium\AppiumDriver::setRotation()
     */
    public function setRotation($data) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('setRotation', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * performActions
     *
     * post /wd/hub/session/:sessionid/actions
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     * @param array $data
     * @options {"required":["actions"]}
     *
     * @return mixed
     *
     *
     * @see \Appium\AppiumDriver::performActions()
     */
    public function performActions($data) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('performActions', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * getPageIndex
     *
     * get /wd/hub/session/:sessionid/element/:elementid/pageindex
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::getPageIndex()
     */
    public function getPageIndex($elementid) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getPageIndex', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * receiveAsyncResponse
     *
     * post /wd/hub/session/:sessionid/receive_async_response
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     * @param array $data
     * @options {"required":["status","value"]}
     *
     * @return mixed
     *
     *
     * @see \Appium\AppiumDriver::receiveAsyncResponse()
     */
    public function receiveAsyncResponse($data) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('receiveAsyncResponse', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * getDeviceTime
     *
     * get /wd/hub/session/:sessionid/appium/device/system_time
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::getDeviceTime()
     */
    public function getDeviceTime() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getDeviceTime', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * unlock
     *
     * post /wd/hub/session/:sessionid/appium/device/unlock
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::unlock()
     */
    public function unlock() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('unlock', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * isLocked
     *
     * post /wd/hub/session/:sessionid/appium/device/is_locked
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::isLocked()
     */
    public function isLocked() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('isLocked', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * startRecordingScreen
     *
     * post /wd/hub/session/:sessionid/appium/start_recording_screen
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     * @param array $data
     * @options {"optional":["options"]}
     *
     * @return mixed
     *
     *
     * @see \Appium\AppiumDriver::startRecordingScreen()
     */
    public function startRecordingScreen($data) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('startRecordingScreen', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * stopRecordingScreen
     *
     * post /wd/hub/session/:sessionid/appium/stop_recording_screen
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     * @param array $data
     * @options {"optional":["options"]}
     *
     * @return mixed
     *
     *
     * @see \Appium\AppiumDriver::stopRecordingScreen()
     */
    public function stopRecordingScreen($data) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('stopRecordingScreen', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * getPerformanceDataTypes
     *
     * post /wd/hub/session/:sessionid/appium/performancedata/types
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::getPerformanceDataTypes()
     */
    public function getPerformanceDataTypes() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getPerformanceDataTypes', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * getPerformanceData
     *
     * post /wd/hub/session/:sessionid/appium/getperformancedata
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     * @param array $data
     * @options {"required":["packageName","dataType"],"optional":["dataReadTimeout"]}
     *
     * @return mixed
     *
     *
     * @see \Appium\AppiumDriver::getPerformanceData()
     */
    public function getPerformanceData($data) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getPerformanceData', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * longPressKeyCode
     *
     * post /wd/hub/session/:sessionid/appium/device/long_press_keycode
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     * @param array $data
     * @options {"required":["keycode"],"optional":["metastate"]}
     *
     * @return mixed
     *
     *
     * @see \Appium\AppiumDriver::longPressKeyCode()
     */
    public function longPressKeyCode($data) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('longPressKeyCode', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * activateApp
     *
     * post /wd/hub/session/:sessionid/appium/device/activate_app
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     * @param array $data
     * @options {"required":[["appId"],["bundleId"]],"optional":["options"]}
     *
     * @return mixed
     *
     *
     * @see \Appium\AppiumDriver::activateApp()
     */
    public function activateApp($data) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('activateApp', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * terminateApp
     *
     * post /wd/hub/session/:sessionid/appium/device/terminate_app
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     * @param array $data
     * @options {"required":[["appId"],["bundleId"]],"optional":["options"]}
     *
     * @return mixed
     *
     *
     * @see \Appium\AppiumDriver::terminateApp()
     */
    public function terminateApp($data) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('terminateApp', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * queryAppState
     *
     * get /wd/hub/session/:sessionid/appium/device/app_state
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     * @param array $data
     * @options {"required":[["appId"],["bundleId"]]}
     *
     * @return mixed
     *
     *
     * @see \Appium\AppiumDriver::queryAppState()
     */
    public function queryAppState($data) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('queryAppState', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * isKeyboardShown
     *
     * get /wd/hub/session/:sessionid/appium/device/is_keyboard_shown
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::isKeyboardShown()
     */
    public function isKeyboardShown() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('isKeyboardShown', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * getSystemBars
     *
     * get /wd/hub/session/:sessionid/appium/device/system_bars
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::getSystemBars()
     */
    public function getSystemBars() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getSystemBars', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * getDisplayDensity
     *
     * get /wd/hub/session/:sessionid/appium/device/display_density
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::getDisplayDensity()
     */
    public function getDisplayDensity() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getDisplayDensity', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * simulatorTouchId
     *
     * post /wd/hub/session/:sessionid/appium/simulator/touch_id
     *
     * @note   override mismatch jsonwire file
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     * @param array $data
     * @options {"required":["match"]}
     *
     * @return mixed
     *
     *
     * @see \Appium\AppiumDriver::simulatorTouchId()
     */
    public function simulatorTouchId($data) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('simulatorTouchId', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * toggleEnrollTouchId
     *
     * post /wd/hub/session/:sessionid/appium/simulator/toggle_touch_id_enrollment
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     * @param array $data
     * @options {"optional":["enabled"]}
     *
     * @return mixed
     *
     *
     * @see \Appium\AppiumDriver::toggleEnrollTouchId()
     */
    public function toggleEnrollTouchId($data) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('toggleEnrollTouchId', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * setValueImmediate
     *
     * post /wd/hub/session/:sessionid/appium/element/:elementid/value
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     * @param array $data
     * @options {"required":["value"]}
     *
     * @return mixed
     *
     *
     * @see \Appium\AppiumDriver::setValueImmediate()
     */
    public function setValueImmediate($data, $elementid) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('setValueImmediate', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * replaceValue
     *
     * post /wd/hub/session/:sessionid/appium/element/:elementid/replace_value
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     * @param array $data
     * @options {"required":["value"]}
     *
     * @return mixed
     *
     *
     * @see \Appium\AppiumDriver::replaceValue()
     */
    public function replaceValue($data, $elementid) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('replaceValue', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * updateSettings
     *
     * post /wd/hub/session/:sessionid/appium/settings
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     * @param array $data
     * @options {"required":["settings"]}
     *
     * @return mixed
     *
     *
     * @see \Appium\AppiumDriver::updateSettings()
     */
    public function updateSettings($data) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('updateSettings', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * getSettings
     *
     * get /wd/hub/session/:sessionid/appium/settings
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::getSettings()
     */
    public function getSettings() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getSettings', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * appReceiveAsyncResponse
     *
     * post /wd/hub/session/:sessionid/appium/receive_async_response
     *
     * @note   override same command name in route.js
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     * @param array $data
     * @options {"required":["response"]}
     *
     * @return mixed
     *
     *
     * @see \Appium\AppiumDriver::appReceiveAsyncResponse()
     */
    public function appReceiveAsyncResponse($data) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('appReceiveAsyncResponse', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * getAlertTextEx
     *
     * get /wd/hub/session/:sessionid/alert/text
     *
     * @note   override same command name in route.js
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::getAlertTextEx()
     */
    public function getAlertTextEx() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getAlertTextEx', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * setAlertTextEx
     *
     * post /wd/hub/session/:sessionid/alert/text
     *
     * @note   override same command name in route.js
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     * @param array $data
     * @options {"required":["text"]}
     *
     * @return mixed
     *
     *
     * @see \Appium\AppiumDriver::setAlertTextEx()
     */
    public function setAlertTextEx($data) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('setAlertTextEx', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * postAcceptAlertEx
     *
     * post /wd/hub/session/:sessionid/alert/accept
     *
     * @note   override same command name in route.js
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::postAcceptAlertEx()
     */
    public function postAcceptAlertEx() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('postAcceptAlertEx', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * postDismissAlertEx
     *
     * post /wd/hub/session/:sessionid/alert/dismiss
     *
     * @note   override same command name in route.js
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::postDismissAlertEx()
     */
    public function postDismissAlertEx() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('postDismissAlertEx', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * getElementRect
     *
     * get /wd/hub/session/:sessionid/element/:elementid/rect
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::getElementRect()
     */
    public function getElementRect($elementid) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getElementRect', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * getElementScreenshot
     *
     * get /wd/hub/session/:sessionid/element/:elementid/screenshot
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::getElementScreenshot()
     */
    public function getElementScreenshot($elementid) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getElementScreenshot', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * getWindowRect
     *
     * get /wd/hub/session/:sessionid/window/rect
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::getWindowRect()
     */
    public function getWindowRect() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getWindowRect', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * setWindowRect
     *
     * post /wd/hub/session/:sessionid/window/rect
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::setWindowRect()
     */
    public function setWindowRect() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('setWindowRect', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * maximizeWindow
     *
     * NOTE: Discard the duplicate function maximizeWindow($windowhandle) as that is legacy.
     *
     * Maximize the specified window if not already maximized.
     * post /wd/hub/session/:sessionid/window/maximize
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::maximizeWindow()
     */
    public function maximizeWindow() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('maximizeWindow', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * minimizeWindow
     *
     * post /wd/hub/session/:sessionid/window/minimize
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::minimizeWindow()
     */
    public function minimizeWindow() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('minimizeWindow', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * fullScreenWindow
     *
     * post /wd/hub/session/:sessionid/window/fullscreen
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::fullScreenWindow()
     */
    public function fullScreenWindow() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('fullScreenWindow', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * getProperty
     *
     * get /wd/hub/session/:sessionid/element/:elementid/property/:name
     *
     * @link   https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     *
     *
     * @see \Appium\AppiumDriver::getProperty()
     */
    public function getProperty($elementid, $name) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getProperty', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * setClipboard
     *
     * post /wd/hub/session/:sessionid/appium/device/set_clipboard
     * @link https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     * @param array $data
     * options {"required":["content"],"optional":["contentType","label"]}
     *
     * @return mixed
     *
     *
     * @see \Appium\AppiumDriver::setClipboard()
     */
    public function setClipboard($data) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('setClipboard', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * getClipboard
     *
     * post /wd/hub/session/:sessionid/appium/device/get_clipboard
     * @link https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     * @param array $data
     * @options {"optional":["contentType"]}
     *
     * @return mixed
     *
     *
     * @see \Appium\AppiumDriver::getClipboard()
     */
    public function getClipboard($data) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getClipboard', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * compareImages
     *
     * post /wd/hub/session/:sessionid/appium/compare_images
     * @link https://github.com/appium/appium-base-driver/blob/master/lib/protocol/routes.js
     * @source route.json
     * @param array $data
     * @options {"required":["mode","firstImage","secondImage"],"optional":["options"]}
     *
     * @return mixed
     *
     *
     * @see \Appium\AppiumDriver::compareImages()
     */
    public function compareImages($data) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('compareImages', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @return \Appium\TestCase\TouchAction
     * @see \Appium\AppiumDriver::getTouchAction()
     */
    public function getTouchAction() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getTouchAction', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @return \Appium\TestCase\MultiAction
     * @see \Appium\AppiumDriver::getMultiTouchAction()
     */
    public function getMultiTouchAction() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('getMultiTouchAction', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Swipe from one point to another point, for an optional duration.
     * convenience method added to Appium (NOT Selenium 3)
     *
     * @link https://pypkg.com/pypi/appium-python-client/f/appium/webdriver/webdriver.py
     *
     * @param string startX x-percent at which to start
     * @param string startY y-percent at which to start
     * @param string endX x-percent at which to end
     * @param string endY y-percent at which to end
     * @param int $duration (optional) time to take the swipe in ms
     *
     * @return mixed
     * @see \Appium\AppiumDriver::swipe()
     */
    public function swipe($startX, $startY, $endX, $endY, $duration = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('swipe', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Flick from one point to another point.
     * convenience method added to Appium (NOT Selenium 3)
     *
     * @link https://pypkg.com/pypi/appium-python-client/f/appium/webdriver/webdriver.py
     *
     * @param string startX x-percent at which to start
     * @param string startY y-percent at which to start
     * @param string endX x-percent at which to end
     * @param string endY y-percent at which to end
     *
     * @return mixed
     * @see \Appium\AppiumDriver::flickFromTo()
     */
    public function flickFromTo($startX, $startY, $endX, $endY) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('flickFromTo', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Scrolls from one element to another
     * convenience method added to Appium (NOT Selenium 3)
     *
     * @link https://pypkg.com/pypi/appium-python-client/f/appium/webdriver/webdriver.py
     * @usage $this->scroll(['type'=>'id','value'=>'header_bar'],['type'=>'xpath','value'=>'div1[1]>classA>textare']);
     *
     * @param array $originElArray      the element from which to being scrolling
     * @param array $destinationElArray the element to scroll to
     * @param int   $duration
     *
     * @return $this
     * @see \Appium\AppiumDriver::scroll()
     */
    public function scroll($originElArray, $destinationElArray, $duration = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('scroll', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Drag the origin element to the destination element
     * convenience method added to Appium (NOT Selenium 3)
     *
     * @link https://github.com/appium/python-client/blob/master/appium/webdriver/webdriver.py
     *
     * @param array $originElArray
     * @param array $destinationElArray
     * @param int   $duration
     *
     * @return \Appium\Traits\Touch
     * @see \Appium\AppiumDriver::dragAndDrop()
     */
    public function dragAndDrop($originElArray, $destinationElArray, $duration = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('dragAndDrop', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Taps on an particular place with up to five fingers, holding for a certain time
     * convenience method added to Appium (NOT Selenium 3)
     *
     * @link https://github.com/appium/python-client/blob/master/appium/webdriver/webdriver.py
     * @usage $this->tap([(100, 20), (100, 60), (100, 100)], 500);
     *
     * @param array $positions
     * @param int   $duration
     *
     * @return \Appium\Traits\Touch
     * @see \Appium\AppiumDriver::tap()
     */
    public function tap($positions, $duration = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('tap', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Pinch on an element a certain amount
     * convenience method added to Appium (NOT Selenium 3)
     *
     * @link https://github.com/appium/python-client/blob/master/appium/webdriver/webdriver.py
     * @usage $this->pinch($element)
     *
     * @param null $element the element to pinch
     * @param int  $percent amount to pinch. Defaults to 200%
     * @param int  $steps   number of steps in the pinch action
     *
     * @return \Appium\Traits\Touch
     * @see \Appium\AppiumDriver::pinch()
     */
    public function pinch($element = null, $percent = null, $steps = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('pinch', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Pinch on an element a certain amount
     * convenience method added to Appium (NOT Selenium 3)
     *
     * @link https://github.com/appium/python-client/blob/master/appium/webdriver/webdriver.py
     * @usage $this->zoom($element)
     *
     * @param null $element the element to zoom
     * @param int  $percent amount to pinch. Defaults to 200%
     * @param int  $steps   number of steps in the pinch action
     *
     * @return \Appium\Traits\Touch
     * @see \Appium\AppiumDriver::zoom()
     */
    public function zoom($element = null, $percent = null, $steps = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('zoom', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @return \Appium\TestCase\Element
     * @see \Appium\AppiumDriver::TestCaseElm()
     */
    public function TestCaseElm() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('TestCaseElm', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param Element $element that accepts a string
     * @param string $keys send to $element
     * @return \PHPUnit_Extensions_Selenium2TestCase_Response
     * @see \Appium\AppiumDriver::sendKeys()
     */
    public function sendKeys($element, $keys) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('sendKeys', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param $value
     *
     * @return \Appium\TestCase\Element|\PHPUnit_Extensions_Selenium2TestCase_Element
     * @see \Appium\AppiumDriver::byIOSUIAutomation()
     */
    public function byIOSUIAutomation($value) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('byIOSUIAutomation', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param $value
     *
     * @return \Appium\TestCase\Element|\PHPUnit_Extensions_Selenium2TestCase_Element
     * @see \Appium\AppiumDriver::byIOSPredicateString()
     */
    public function byIOSPredicateString($value) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('byIOSPredicateString', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param $value
     *
     * @return \Appium\TestCase\Element|\PHPUnit_Extensions_Selenium2TestCase_Element
     * @see \Appium\AppiumDriver::byAndroidUIAutomator()
     */
    public function byAndroidUIAutomator($value) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('byAndroidUIAutomator', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param $value
     *
     * @return \Appium\TestCase\Element|\PHPUnit_Extensions_Selenium2TestCase_Element
     * @see \Appium\AppiumDriver::byAccessibilityId()
     */
    public function byAccessibilityId($value) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('byAccessibilityId', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param string $value e.g. 'container'
     *
     * @return \Appium\TestCase\Element|\PHPUnit_Extensions_Selenium2TestCase_Element
     * @see \Appium\AppiumDriver::byClassName()
     */
    public function byClassName($value) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('byClassName', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param string $value e.g. 'div.container'
     *
     * @return \Appium\TestCase\Element|\PHPUnit_Extensions_Selenium2TestCase_Element
     * @see \Appium\AppiumDriver::byCssSelector()
     */
    public function byCssSelector($value) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('byCssSelector', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param string $value e.g. 'uniqueId'
     *
     * @return \Appium\TestCase\Element|\PHPUnit_Extensions_Selenium2TestCase_Element
     * @see \Appium\AppiumDriver::byId()
     */
    public function byId($value) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('byId', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param string $value e.g. 'Link text'
     *
     * @return \Appium\TestCase\Element|\PHPUnit_Extensions_Selenium2TestCase_Element
     * @see \Appium\AppiumDriver::byLinkText()
     */
    public function byLinkText($value) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('byLinkText', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param string $value e.g. 'Link te'
     *
     * @return \Appium\TestCase\Element|\PHPUnit_Extensions_Selenium2TestCase_Element
     * @see \Appium\AppiumDriver::byPartialLinkText()
     */
    public function byPartialLinkText($value) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('byPartialLinkText', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param string $value e.g. 'email_address'
     *
     * @return \Appium\TestCase\Element|\PHPUnit_Extensions_Selenium2TestCase_Element
     * @see \Appium\AppiumDriver::byName()
     */
    public function byName($value) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('byName', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param string $value e.g. 'body'
     *
     * @return \Appium\TestCase\Element|\PHPUnit_Extensions_Selenium2TestCase_Element
     * @see \Appium\AppiumDriver::byTag()
     */
    public function byTag($value) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('byTag', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param string $value e.g. '/div[@attribute="value"]'
     *
     * @return \Appium\TestCase\Element|\PHPUnit_Extensions_Selenium2TestCase_Element
     * @see \Appium\AppiumDriver::byXPath()
     */
    public function byXPath($value) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('byXPath', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param $value
     * @return \Appium\TestCase\Element
     * @link https://github.com/appium/python-client/blob/master/appium/webdriver/webdriver.py
     * @see \Appium\AppiumDriver::byIOSClassChain()
     */
    public function byIOSClassChain($value) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('byIOSClassChain', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Take a screenshot of the current page.
     *
     * @param string $save_as The path of the screenshot to be saved.
     *
     * @return string The screenshot in PNG format.
     * @see \Appium\AppiumDriver::takeScreenshotAndSave()
     */
    public function takeScreenshotAndSave($save_as = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('takeScreenshotAndSave', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     *
     * @return \PHPUnit_Extensions_Selenium2TestCase_Response
     * @see \Appium\AppiumDriver::launchAppiumApp()
     */
    public function launchAppiumApp() {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('launchAppiumApp', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Set the current geo location
     * @param $latitude
     * @param $longitude
     * @param $altitude
     * @return mixed
     * @usage $this->setLocation(100,150,200);
     * @author Anoop Ambunhi <anoop.nair@tajawal.com>
     * @link https://github.com/appium/python-client/blob/master/appium/webdriver/webdriver.py
     *
     * @see \Appium\AppiumDriver::setLocation()
     */
    public function setLocation($latitude, $longitude, $altitude) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('setLocation', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that two variables are equal. If you're comparing floating-point values,
     * you can specify the optional "delta" parameter which dictates how great of a precision
     * error are you willing to tolerate in order to consider the two values equal.
     *
     * Regular example:
     * ```php
     * <?php
     * $I->assertEquals(5, $element->getChildrenCount());
     * ```
     *
     * Floating-point example:
     * ```php
     * <?php
     * $I->assertEquals(0.3, $calculator->add(0.1, 0.2), 'Calculator should add the two numbers correctly.', 0.01);
     * ```
     *
     * @param        $expected
     * @param        $actual
     * @param string $message
     * @param float  $delta
     * @see \Codeception\Module\Asserts::assertEquals()
     */
    public function assertEquals($expected, $actual, $message = null, $delta = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertEquals', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that two variables are not equal. If you're comparing floating-point values,
     * you can specify the optional "delta" parameter which dictates how great of a precision
     * error are you willing to tolerate in order to consider the two values not equal.
     *
     * Regular example:
     * ```php
     * <?php
     * $I->assertNotEquals(0, $element->getChildrenCount());
     * ```
     *
     * Floating-point example:
     * ```php
     * <?php
     * $I->assertNotEquals(0.4, $calculator->add(0.1, 0.2), 'Calculator should add the two numbers correctly.', 0.01);
     * ```
     *
     * @param        $expected
     * @param        $actual
     * @param string $message
     * @param float  $delta
     * @see \Codeception\Module\Asserts::assertNotEquals()
     */
    public function assertNotEquals($expected, $actual, $message = null, $delta = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertNotEquals', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that two variables are same
     *
     * @param        $expected
     * @param        $actual
     * @param string $message
     * @see \Codeception\Module\Asserts::assertSame()
     */
    public function assertSame($expected, $actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertSame', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that two variables are not same
     *
     * @param        $expected
     * @param        $actual
     * @param string $message
     * @see \Codeception\Module\Asserts::assertNotSame()
     */
    public function assertNotSame($expected, $actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertNotSame', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that actual is greater than expected
     *
     * @param        $expected
     * @param        $actual
     * @param string $message
     * @see \Codeception\Module\Asserts::assertGreaterThan()
     */
    public function assertGreaterThan($expected, $actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertGreaterThan', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that actual is greater or equal than expected
     *
     * @param        $expected
     * @param        $actual
     * @param string $message
     * @see \Codeception\Module\Asserts::assertGreaterThanOrEqual()
     */
    public function assertGreaterThanOrEqual($expected, $actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertGreaterThanOrEqual', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that actual is less than expected
     *
     * @param        $expected
     * @param        $actual
     * @param string $message
     * @see \Codeception\Module\Asserts::assertLessThan()
     */
    public function assertLessThan($expected, $actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertLessThan', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that actual is less or equal than expected
     *
     * @param        $expected
     * @param        $actual
     * @param string $message
     * @see \Codeception\Module\Asserts::assertLessThanOrEqual()
     */
    public function assertLessThanOrEqual($expected, $actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertLessThanOrEqual', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that haystack contains needle
     *
     * @param        $needle
     * @param        $haystack
     * @param string $message
     * @see \Codeception\Module\Asserts::assertContains()
     */
    public function assertContains($needle, $haystack, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertContains', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that haystack doesn't contain needle.
     *
     * @param        $needle
     * @param        $haystack
     * @param string $message
     * @see \Codeception\Module\Asserts::assertNotContains()
     */
    public function assertNotContains($needle, $haystack, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertNotContains', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that string match with pattern
     *
     * @param string $pattern
     * @param string $string
     * @param string $message
     * @see \Codeception\Module\Asserts::assertRegExp()
     */
    public function assertRegExp($pattern, $string, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertRegExp', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that string not match with pattern
     *
     * @param string $pattern
     * @param string $string
     * @param string $message
     * @see \Codeception\Module\Asserts::assertNotRegExp()
     */
    public function assertNotRegExp($pattern, $string, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertNotRegExp', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that a string starts with the given prefix.
     *
     * @param string $prefix
     * @param string $string
     * @param string $message
     * @see \Codeception\Module\Asserts::assertStringStartsWith()
     */
    public function assertStringStartsWith($prefix, $string, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertStringStartsWith', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that a string doesn't start with the given prefix.
     *
     * @param string $prefix
     * @param string $string
     * @param string $message
     * @see \Codeception\Module\Asserts::assertStringStartsNotWith()
     */
    public function assertStringStartsNotWith($prefix, $string, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertStringStartsNotWith', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that variable is empty.
     *
     * @param        $actual
     * @param string $message
     * @see \Codeception\Module\Asserts::assertEmpty()
     */
    public function assertEmpty($actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertEmpty', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that variable is not empty.
     *
     * @param        $actual
     * @param string $message
     * @see \Codeception\Module\Asserts::assertNotEmpty()
     */
    public function assertNotEmpty($actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertNotEmpty', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that variable is NULL
     *
     * @param        $actual
     * @param string $message
     * @see \Codeception\Module\Asserts::assertNull()
     */
    public function assertNull($actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertNull', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that variable is not NULL
     *
     * @param        $actual
     * @param string $message
     * @see \Codeception\Module\Asserts::assertNotNull()
     */
    public function assertNotNull($actual, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertNotNull', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that condition is positive.
     *
     * @param        $condition
     * @param string $message
     * @see \Codeception\Module\Asserts::assertTrue()
     */
    public function assertTrue($condition, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertTrue', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the condition is NOT true (everything but true)
     *
     * @param        $condition
     * @param string $message
     * @see \Codeception\Module\Asserts::assertNotTrue()
     */
    public function assertNotTrue($condition, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertNotTrue', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that condition is negative.
     *
     * @param        $condition
     * @param string $message
     * @see \Codeception\Module\Asserts::assertFalse()
     */
    public function assertFalse($condition, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertFalse', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that the condition is NOT false (everything but false)
     *
     * @param        $condition
     * @param string $message
     * @see \Codeception\Module\Asserts::assertNotFalse()
     */
    public function assertNotFalse($condition, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertNotFalse', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks if file exists
     *
     * @param string $filename
     * @param string $message
     * @see \Codeception\Module\Asserts::assertFileExists()
     */
    public function assertFileExists($filename, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertFileExists', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks if file doesn't exist
     *
     * @param string $filename
     * @param string $message
     * @see \Codeception\Module\Asserts::assertFileNotExists()
     */
    public function assertFileNotExists($filename, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertFileNotExists', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param $expected
     * @param $actual
     * @param $description
     * @see \Codeception\Module\Asserts::assertGreaterOrEquals()
     */
    public function assertGreaterOrEquals($expected, $actual, $description = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertGreaterOrEquals', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param $expected
     * @param $actual
     * @param $description
     * @see \Codeception\Module\Asserts::assertLessOrEquals()
     */
    public function assertLessOrEquals($expected, $actual, $description = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertLessOrEquals', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param $actual
     * @param $description
     * @see \Codeception\Module\Asserts::assertIsEmpty()
     */
    public function assertIsEmpty($actual, $description = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertIsEmpty', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param $key
     * @param $actual
     * @param $description
     * @see \Codeception\Module\Asserts::assertArrayHasKey()
     */
    public function assertArrayHasKey($key, $actual, $description = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertArrayHasKey', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param $key
     * @param $actual
     * @param $description
     * @see \Codeception\Module\Asserts::assertArrayNotHasKey()
     */
    public function assertArrayNotHasKey($key, $actual, $description = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertArrayNotHasKey', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Checks that array contains subset.
     *
     * @param array  $subset
     * @param array  $array
     * @param bool   $strict
     * @param string $message
     * @see \Codeception\Module\Asserts::assertArraySubset()
     */
    public function assertArraySubset($subset, $array, $strict = null, $message = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertArraySubset', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param $expectedCount
     * @param $actual
     * @param $description
     * @see \Codeception\Module\Asserts::assertCount()
     */
    public function assertCount($expectedCount, $actual, $description = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertCount', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param $class
     * @param $actual
     * @param $description
     * @see \Codeception\Module\Asserts::assertInstanceOf()
     */
    public function assertInstanceOf($class, $actual, $description = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertInstanceOf', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param $class
     * @param $actual
     * @param $description
     * @see \Codeception\Module\Asserts::assertNotInstanceOf()
     */
    public function assertNotInstanceOf($class, $actual, $description = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertNotInstanceOf', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * @param $type
     * @param $actual
     * @param $description
     * @see \Codeception\Module\Asserts::assertInternalType()
     */
    public function assertInternalType($type, $actual, $description = null) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('assertInternalType', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Fails the test with message.
     *
     * @param $message
     * @see \Codeception\Module\Asserts::fail()
     */
    public function fail($message) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('fail', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Handles and checks exception called inside callback function.
     * Either exception class name or exception instance should be provided.
     *
     * ```php
     * <?php
     * $I->expectException(MyException::class, function() {
     *     $this->doSomethingBad();
     * });
     *
     * $I->expectException(new MyException(), function() {
     *     $this->doSomethingBad();
     * });
     * ```
     * If you want to check message or exception code, you can pass them with exception instance:
     * ```php
     * <?php
     * // will check that exception MyException is thrown with "Don't do bad things" message
     * $I->expectException(new MyException("Don't do bad things"), function() {
     *     $this->doSomethingBad();
     * });
     * ```
     *
     * @param $exception string or \Exception
     * @param $callback
     *
     * @deprecated Use expectThrowable instead
     * @see \Codeception\Module\Asserts::expectException()
     */
    public function expectException($exception, $callback) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('expectException', func_get_args()));
    }

 
    /**
     * [!] Method is generated. Documentation taken from corresponding module.
     *
     * Handles and checks throwables (Exceptions/Errors) called inside the callback function.
     * Either throwable class name or throwable instance should be provided.
     *
     * ```php
     * <?php
     * $I->expectThrowable(MyThrowable::class, function() {
     *     $this->doSomethingBad();
     * });
     *
     * $I->expectThrowable(new MyException(), function() {
     *     $this->doSomethingBad();
     * });
     * ```
     * If you want to check message or throwable code, you can pass them with throwable instance:
     * ```php
     * <?php
     * // will check that throwable MyError is thrown with "Don't do bad things" message
     * $I->expectThrowable(new MyError("Don't do bad things"), function() {
     *     $this->doSomethingBad();
     * });
     * ```
     *
     * @param $throwable string or \Throwable
     * @param $callback
     * @see \Codeception\Module\Asserts::expectThrowable()
     */
    public function expectThrowable($throwable, $callback) {
        return $this->getScenario()->runStep(new \Codeception\Step\Action('expectThrowable', func_get_args()));
    }
}
